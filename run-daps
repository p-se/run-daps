#!/usr/bin/env bash
#
# This script builds the docs using an OCI container that is created before the
# docs are built. It is meant to be an easy entrance to building the docs with
# daps on operating systems where `daps` or its dependencies required to build
# these docs are not available.

function check {
    which $@ >/dev/null
}

CONTAINER_NAME_TAG=${CONTAINER_NAME_TAG:-"doc-ses/daps"}
ENTRYPOINT=${ENTRYPOINT:-daps}
DEBUG=${DEBUG:-}

function validate_env {
    if [ -z "$CONTAINER_NAME_TAG" ]; then
        echo >&2 "error: \$CONTAINER_NAME is empty"
        exit -1
    fi
}

function check_deps {
    if ! (check podman && check buildah); then
        echo >&2 "error: podman and/or buildah not installed"
        exit -1
    fi
}

function buildah_build_image {
    container=$(buildah from --pull registry.opensuse.org/opensuse/leap:latest)
    buildah run $container zypper -n in tar daps xmlformat inotify-tools
    buildah config --workingdir /root/docs/ $container
    buildah commit $container $CONTAINER_NAME_TAG
}

function ensure_image_is_built {
    if ! podman image inspect localhost/${CONTAINER_NAME_TAG} >/dev/null; then
        buildah_build_image
    fi
}

function main {
    validate_env
    check_deps
    ensure_image_is_built

    if [ "$1" = "format" ]; then
        shift
        podman run \
            --rm \
            -it \
            --name daps-xmlformat \
            --hostname daps-xmlformat \
            --network=host \
            -v $(pwd):/root/docs \
            --entrypoint=daps-xmlformat \
            $CONTAINER_NAME_TAG $@
    elif [ "$1" = "watch" ]; then
        # shifting is actually not necessary but in case the command gets
        # extended and will ever use $@, it would prevent an issue right away.
        shift

        args="-d DC-ses-all html"
        if [ $# -ne 0 ]; then
            args=$@
        fi
        cmd="
            inotifywait -q -m -e close_write xml/ | while read event; do
                daps $args
            done
        "
        echo "watching files in xml/ for changes"
        podman run \
            --rm \
            -it \
            --name daps-watch \
            --hostname daps-watch \
            --network=host \
            -v $(pwd):/root/docs \
            --entrypoint=bash \
            $CONTAINER_NAME_TAG -c "eval $cmd"
    else
        podman run \
            --rm \
            -it \
            --name daps \
            --hostname daps \
            --network=host \
            -v $(pwd):/root/docs \
            --entrypoint=$ENTRYPOINT \
            $CONTAINER_NAME_TAG $@
    fi
}

function usage {
    cat <<EOF
NAME

    run-daps.sh - runs daps inside a container

SYNOPSIS

    ./run-daps [<run-daps-argument>|<daps-argument>]

    run-daps arguments:

        None            - print this help screen
        format <arg>    - format file passed in <arg>
        watch           - watch xml/ dir for changes and rebuild docs automatically
        watch <args>    - watch xml/ dir and pass <args> to $(daps) on changes

    daps arguments:

        Every non-"run-daps-argument" is passed along to daps.

DESCRIPTION

    run-daps.sh builds a container if no container exists that could be used
    and runs "daps" inside this container, while the current folder is
    mounted inside it, so that the compiled docs end up being in the "build"
    directory.

    "daps" is the entrypoint of the container, so that only arguments to the
    "daps" binary need to be appended to execute daps.

EXAMPLES

    Running run-daps without any arguments prints this help message. If any
    argument is provided, it is passed along to daps inside the container.

    run-daps

    prints this help, whereas

    run-daps -h

    or

    HELP=anything run-daps

    prints the help screen of "daps" running inside the container.

    run-daps -d DC-ses-deployment html

    creates the HTML version of the SES deployment guide in the
    "build/ses-deployment/html" directory.

    run-daps -d DC-ses-deployment html

    creates the PDF version of the SES deployment guide in the
    "build/ses-deployment/pdf" directory.

    run-daps format <file>

    formats the given file with \`daps-xmlformat\`.

    run-daps watch

    watches the "xml/" directory for changes and rebuilds \`DC-ses-all\`.

    run-daps watch -d DC-ses-admin

    watches the "xml/" directory for changes and rebuilds \`DC-ses-admin\` on
    changes.


SEE ALSO

    Daps2Docker - https://github.com/openSUSE/daps2docker

        Daps2Docker is meant to make documentation generation using Docker
        (or Podman) as easy as possible and is maintained by several people.

        run-daps however, is meant to be just a thin (and fast-running)
        wrapper around daps to make it available on all operating systems
        capable of running Linux.

        For a more comprehensive comparion of both you may want to visit
        https://github.com/SUSE/doc-ses/pull/889
EOF
}

if [ -n "$DEBUG" ]; then
    set -ex
fi

if [[ $# -eq 0 || -n "$HELP" ]]; then
    usage
else
    main $@
fi
